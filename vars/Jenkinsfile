@Library('md-shared-library') _

pipeline {
    agent any
    environment {
        EMAIL_CREDENTIALS_ID = 'email-smtp-credentials' 
        EMAIL_RECIPIENTS = ''           
        SMTP_HOST = 'smtp.example.com'                 // SMTP host (e.g., Gmail: smtp.gmail.com)
        SMTP_PORT = '465'                              // SMTP port (587 for TLS, 465 for SSL)

        SONAR_CREDENTIAL        =''
        GIT_CREDENTIAL          =''
        GIT_REPO_URLS           =''
        RELEAS_GIT_REPO         =''
        SOURCE_PATH             =''
        ARTIFACT_NAME           =''
        TARGET_HOST             =''
        VM_CREDENTIALS_ID       =''
        ARTIFACT_PATH           =''
        DOCKER_CREDENTIALS      =''
        DOCKER_REGISTRY         =''
        DOCKER_IMAGE_TAG_1      =''
        DOCKER_IMAGE_TAG_2      =''
        CLEANUP_DOCKER_IMAGES   =true //True will remove the docker images in post declarations.
        SERVICE_01              =''
        SERVICE_02              =''
        SERVICE_03              =''
        CONTEXT_PATH_01         =''
        CONTEXT_PATH_02         =''
        CONTEXT_PATH_03         =''    
        }
    stages {
        stage('Clone Repositories') {
            steps {
                script {
                    cloneMultipleRepos(envVariable: env.GIT_REPO_URLS, branch: 'main', credentialsId: env.GIT_CREDENTIAL, depth: 1)
                }
            }
        }
        stage('Update .env and Build Binaries') {
            when {
                expression { return params.SELECT_IMAGES.contains('majordomo_nginx') || params.SELECT_IMAGES.contains('All') } 
            }
            steps {
                updateEnvAndBuildBinaries(
                    targetCustomer: params.TARGET_CUSTOMER,
                    envFilePath: './navigator-ui/.env',
                    binaryOutputPath: 'bin',
                    goProjects: [
                        [
                            projectPath: './navigator-manager',
                            binaryName: 'tailwinds-lgen',
                            buildCommand: 'cd .. && go build -o bin/tailwinds-lgen github.com/tailwinds/navigator/pkg/license',
                            postCommand: 'cd bin && ./tailwinds-lgen  120'
                        ],
                        [
                            projectPath: './navigator-manager',
                            binaryName: 'navigator-manager',
                            buildCommand: 'cd .. && go build -o bin/navigator-manager github.com/tailwinds/navigator/cmd/startup'
                        ],
                        [
                            projectPath: './majordomo-sse',
                            binaryName: 'majordomo-sse',
                            buildCommand: 'cd ../../majordomo-sse && go build -o bin/majordomo-sse main.go'
                            ]
                        ]
                    )
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    scanWithSonarQube(envVariable: env.GIT_REPO_URLS, sonarServer: 'SonarQube', sonarProjectKeyPrefix: 'md-')
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    scanWithSonarQube(
                        envVariable: env.GIT_REPO_URLS,
                        credentialsId: env.SONAR_CREDENTIAL,
                        sonarProjectKeyPrefix: 'md-'
                    )
                }
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_01, dockerfilePath: 'Dockerfile'],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_02, dockerfilePath: 'Dockerfile'],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_03, dockerfilePath: 'Dockerfile'],
                    ]
                    
                    buildDockerImages([
                        imageDefinitions: imageDefinitions,
                        registryCredentialsId: env.DOCKER_CREDENTIALS

                    ])
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                    ]

                    trivyImageScan(imageDefinitions: imageDefinitions, reportDir: 'trivy-reports')
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                    ]
                    
                    dockerImagesPush([
                        imageDefinitions: imageDefinitions,
                        registryCredentialsId: env.DOCKER_CREDENTIALS

                    ])
                }
            }
        }
        stage('Git Release') {
            steps {
                script {
                    createGitRelease(
                        gitRepo: env.RELEAS_GIT_REPO,
                        releaseTag: env.DOCKER_IMAGE_TAG_1,
                        extraTag: env.DOCKER_IMAGE_TAG_2,
                        artifactName: env.ARTIFACT_NAME,
                        sourcePath: env.SOURCE_PATH,
                        githubTokenId: env.GIT_CREDENTIAL,
                        releaseName: 'My Release',
                        releaseDescription: 'This is the release description'
                    )
                }
            }
        }
        stage('Deploy to vm') {
            steps {
                script {
                    deployToUbuntu(registryCredentialsId: env.DOCKER_CREDENTIALS, targetHost: env.TARGET_HOST, vmCredentials: env.VM_CREDENTIALS_ID, artifactPath: env.ARTIFACT_PATH, releaseTag: env.DOCKER_IMAGE_TAG_1)
                }
            }
        }
        stage('Run Selenium Tests') {
            steps {
                echo 'Running Selenium tests...'
                runTests(
                    testDir: "${env.TEST_DIR}",
                    resultsDir: "${env.RESULTS_DIR}",
                    browser: "${env.BROWSER}",
                    additionalArgs: "${env.ADDITIONAL_ARGS}"
                )
            }
        }

    }
    post {
        always {
            script {
                archiveArtifacts artifacts: 'trivy-reports/*.json', allowEmptyArchive: true
                sendEmailWithAttachment(
                    recipients: 'team@example.com',
                    subject: "Build #${env.BUILD_NUMBER} Status",
                    body: """<p>The build has completed. Please find the attached reports.</p>""",
                    attachments: ['reports/*.json']
                )
                cleanupDockerImages(cleanupImages: env.CLEANUP_DOCKER_IMAGES)
                cleanWorkspace(excludePatterns: ['reports', 'logs'])
            }
        }
    }

}
