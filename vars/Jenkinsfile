@Library('md-shared-library') _

pipeline {
    agent any
    environment {
        EMAIL_CREDENTIALS_ID     = '' 
        EMAIL_RECIPIENTS         = ''           
        SMTP_HOST                = 'smtp.gmail.com'                 // SMTP host (e.g., Gmail: smtp.gmail.com)
        SMTP_PORT                = '465'                              // SMTP port (587 for TLS, 465 for SSL)

        SONAR_CREDENTIAL         =''
        GIT_CREDENTIAL          =''
        GIT_REPO_URLS           =''
        RELEAS_GIT_REPO         =''
        SOURCE_PATH             =''
        ARTIFACT_NAME           =''
        TARGET_HOST             =''
        VM_CREDENTIALS_ID       =''
        ARTIFACT_PATH           =''
        DOCKER_CREDENTIALS      =''
        DOCKER_REGISTRY         =''
        DOCKER_IMAGE_TAG_1      =''
        DOCKER_IMAGE_TAG_2      =''
        CLEANUP_DOCKER_IMAGES   =true //True will remove the docker images in post declarations.
        SERVICE_01              =''
        SERVICE_02              =''
        SERVICE_03              =''
        CONTEXT_PATH_01         =''
        CONTEXT_PATH_02         =''
        CONTEXT_PATH_03         =''    
        }
    stages {
        stage('Clone Repositories') {
            steps {
                script {
                    cloneMultipleRepos(envVariable: env.GIT_REPO_URLS, branch: 'main', credentialsId: env.GIT_CREDENTIAL, depth: 1)
                }
            }
        }
        stage('Run Commands') {
            when {
                expression { return params.SELECT_IMAGES.contains('majordomo_nginx') || params.SELECT_IMAGES.contains('All') }
            }
            steps {
                script {
                    def basePath ='./navigator-manager/container_builds/'
                    def commands = []
                    
                    // Add .env file updates based on TARGET_CUSTOMER
                    if (params.TARGET_CUSTOMER == 'Tailwinds') {
                        commands.add("echo '# Tailwinds\nREACT_APP_MAJORDOMO=Majordomo\nREACT_APP_IMG=./images/taiwindicon.png\nREACT_APP_TITLE=Tailwinds' > navigator-ui/.env")
                    } else if (params.TARGET_CUSTOMER == 'IFF') {
                        commands.add("echo '# IFF\nREACT_APP_MAJORDOMO=Cloud Conductor\nREACT_APP_IMG=./images/iff.png\nREACT_APP_TITLE=Cloud Conductor' > navigator-ui/.env")
                    }
                    commands.add("cat ./navigator-manager/container_builds/")
                    commands.add("pwd")
                    // Add Go binary build commands
                    commands.add("cd ./navigator-manager && go build -o bin/tailwinds-lgen github.com/tailwinds/navigator/pkg/license")
                    commands.add("cd ./navigator-manager/bin && ./tailwinds-lgen admin@tailwinds.ai 120")
                    commands.add("cd ./navigator-manager && go build -o bin/navigator-manager github.com/tailwinds/navigator/cmd/startup")
                    commands.add("cd ./majordomo-sse && go build -o bin/majordomo-sse main.go")
                    commands.add("cp ./majordomo-sse/bin/majordomo-sse ../bin")
                    // npm install for nginx/ui image
                    commands.add("cd ./navigator-ui && npm i --force")
                    commands.add("cd ./navigator-ui && npm run build --force")
                    commands.add("cp -r ./navigator-ui/dist dist")
                    commands.add("cp -r ./navigator-ui/nginx nginx")
                    
                    // Run all the commands using shared library
                    envUpdate(basePath, commands)
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    scanWithSonarQube(
                        envVariable: env.GIT_REPO_URLS,
                        credentialsId: env.SONAR_CREDENTIAL,
                        sonarProjectKeyPrefix: 'md-'
                    )
                }
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_01, dockerfilePath: 'Dockerfile'],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_02, dockerfilePath: 'Dockerfile'],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_03, dockerfilePath: 'Dockerfile'],
                    ]
                    
                    buildDockerImages([
                        imageDefinitions: imageDefinitions,
                        registryCredentialsId: env.DOCKER_CREDENTIALS

                    ])
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                    ]

                    trivyImageScan(imageDefinitions: imageDefinitions, reportDir: 'trivy-reports')
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                    ]
                    
                    dockerImagesPush([
                        imageDefinitions: imageDefinitions,
                        registryCredentialsId: env.DOCKER_CREDENTIALS

                    ])
                }
            }
        }
        stage('Git Release') {
            steps {
                script {
                    createGitRelease(
                        gitRepo: env.RELEAS_GIT_REPO,
                        releaseTag: env.DOCKER_IMAGE_TAG_1,
                        extraTag: env.DOCKER_IMAGE_TAG_2,
                        artifactName: env.ARTIFACT_NAME,
                        sourcePath: env.SOURCE_PATH,
                        githubTokenId: env.GIT_CREDENTIAL,
                        releaseName: 'MajorDomo $DOCKER_IMAGE_TAG_1',
                        releaseDescription: 'This is the release description'
                    )
                }
            }
        }
        stage('Deploy to vm') {
            steps {
                script {
                    deployToUbuntu(registryCredentialsId: env.DOCKER_CREDENTIALS, targetHost: env.TARGET_HOST, vmCredentials: env.VM_CREDENTIALS_ID, artifactPath: env.ARTIFACT_PATH, releaseTag: env.DOCKER_IMAGE_TAG_1)
                }
            }
        }
        stage('Run Selenium Tests') {
            steps {
                echo 'Running Selenium tests...'
                runTests(
                    testDir: "${env.TEST_DIR}",
                    resultsDir: "${env.RESULTS_DIR}",
                    browser: "${env.BROWSER}",
                    additionalArgs: "${env.ADDITIONAL_ARGS}"
                )
            }
        }

    }
    post {
        always {
            script {
                archiveArtifacts artifacts: 'trivy-reports/*.json', allowEmptyArchive: true
                sendEmailWithAttachment(
                    recipients: 'team@example.com',
                    subject: "Build #${env.BUILD_NUMBER} Status",
                    body: """<p>The build has completed. Please find the attached reports.</p>""",
                    attachments: ['reports/*.json']
                )
                cleanupDockerImages(cleanupImages: env.CLEANUP_DOCKER_IMAGES)
                cleanWorkspace(excludePatterns: ['reports', 'logs'])
            }
        }
    }

}
