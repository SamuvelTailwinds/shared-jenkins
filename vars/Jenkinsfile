@Library('md-shared-library') _

pipeline {
    agent any
    environment {
        SONAR_CREDENTIAL    =''
        GIT_CREDENTIAL      =''
        GIT_REPO_URLS       =''
        RELEAS_GIT_REPO     =''
        SOURCE_PATH         =''
        ARTIFACT_NAME       =''
        DOCKER_REGISTRY       =''
        DOCKER_IMAGE_TAG_1    =''
        DOCKER_IMAGE_TAG_2    =''
        CLEANUP_DOCKER_IMAGES =true
        SERVICE_01          =''
        SERVICE_02          =''
        SERVICE_03          =''
        CONTEXT_PATH_01     ='.'
        CONTEXT_PATH_02     =''
        CONTEXT_PATH_03     =''    
        }
    stages {
        stage('Clone Repositories') {
            steps {
                script {
                    cloneMultipleRepos(envVariable: env.GIT_REPO_URLS, branch: 'main', credentialsId: env.GIT_CREDENTIAL, depth: 1)
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    scanWithSonarQube(envVariable: env.GIT_REPO_URLS, sonarServer: 'SonarQube', sonarProjectKeyPrefix: 'md-')
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    scanWithSonarQube(
                        envVariable: env.GIT_REPO_URLS,
                        credentialsId: env.SONAR_CREDENTIAL,
                        sonarProjectKeyPrefix: 'md-'
                    )
                }
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_01, dockerfilePath: 'Dockerfile'],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_02, dockerfilePath: 'Dockerfile'],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, contextPath: env.CONTEXT_PATH_03, dockerfilePath: 'Dockerfile'],
                    ]
                    
                    buildDockerImages([
                        imageDefinitions: imageDefinitions,
                        registryCredentialsId: env.DOCKER_CREDENTIALS

                    ])
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                    ]

                    trivyImageScan(imageDefinitions: imageDefinitions, reportDir: 'trivy-reports')
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG_1, ],
                    ]
                    
                    dockerImagesPush([
                        imageDefinitions: imageDefinitions,
                        registryCredentialsId: env.DOCKER_CREDENTIALS

                    ])
                }
            }
        }
        stage('Git Release') {
            steps {
                script {
                    createGitRelease(
                        gitRepo: env.RELEAS_GIT_REPO,
                        releaseTag: env.DOCKER_IMAGE_TAG_1,
                        extraTag: env.DOCKER_IMAGE_TAG_2,
                        artifactName: env.ARTIFACT_NAME,
                        sourcePath: env.SOURCE_PATH,
                        githubTokenId: env.GIT_CREDENTIAL,
                        releaseName: 'My Release',
                        releaseDescription: 'This is the release description'
                    )
                }
            }
        }
        stage('Deploy to vm') {
            steps {
                script {
                    deployToUbuntu("${TARGET_HOST}", "${SSH_USER}", "${SSH_KEY_PATH}", "${ARTIFACT_PATH}")
                }
            }
        }
    }
    post {
        always {
            script {
                archiveArtifacts artifacts: 'trivy-reports/*.json', allowEmptyArchive: true
                cleanupDockerImages(cleanupImages: env.CLEANUP_DOCKER_IMAGES)
                cleanWorkspace(excludePatterns: ['reports', 'logs'])
            }
        }
    }

}
