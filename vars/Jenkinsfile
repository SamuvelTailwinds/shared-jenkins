@Library('md-shared-library') _

pipeline {
    agent any
    environment {
        SONAR_CREDENTIAL    =''
        GIT_CREDENTIAL      =''
        GIT_REPO_URLS       =''
        DOCKER_REGISTRY     =''
        DOCKER_IMAGE_TAG    =''
        SERVICE_01          =''
        SERVICE_02          =''
        SERVICE_03          =''
        CONTEXT_PATH_01     ='.'
        CONTEXT_PATH_02     =''
        CONTEXT_PATH_03     =''    
        }
    stages {
        stage('Clone Repositories') {
            steps {
                script {
                    cloneMultipleRepos(envVariable: env.GIT_REPO_URLS, branch: 'main', credentialsId: env.GIT_CREDENTIAL, targetDir: 'repos', depth: 1)
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    scanWithSonarQube(envVariable: env.GIT_REPO_URLS, sonarServer: 'SonarQube', sonarProjectKeyPrefix: 'md-')
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    scanWithSonarQube(
                        envVariable: env.GIT_REPO_URLS,
                        credentialsId: env.SONAR_CREDENTIAL,
                        sonarProjectKeyPrefix: 'md-'
                    )
                }
            }
        }
        stage('Build and Push Docker Images') {
            steps {
                script {
                    def imageDefinitions = [
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_01, imageTag: env.DOCKER_IMAGE_TAG, contextPath: env.CONTEXT_PATH_01, dockerfilePath: 'Dockerfile'],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_02, imageTag: env.DOCKER_IMAGE_TAG, contextPath: env.CONTEXT_PATH_02, dockerfilePath: 'Dockerfile'],
                        [dockerRegistry: env.DOCKER_REGISTRY, imageName: env.SERVICE_03, imageTag: env.DOCKER_IMAGE_TAG, contextPath: env.CONTEXT_PATH_03, dockerfilePath: 'Dockerfile'],
                    ]
                    
                    buildDockerImages([
                        imageDefinitions: imageDefinitions,
                        registryCredentialsId: env.DOCKER_CREDENTIALS

                    ])
                }
            }
        }
    }
}
